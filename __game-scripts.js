var CollisionSoundTrigger=pc.createScript("collisionSoundTrigger");CollisionSoundTrigger.attributes.add("exitRule",{type:"number",title:"Sound behavior",default:1,enum:[{"Stop on exit":1},{"Pause on exit":2},{"Play only once":3},{"Play on exit":4}]}),CollisionSoundTrigger.prototype.initialize=function(){this.entity.collision.on("triggerenter",this.onTriggerEnter,this),this.entity.collision.on("triggerleave",this.onTriggerLeave,this),this.entity.isSoundPaused=!1,this.entity.playedOnce=!1},CollisionSoundTrigger.prototype.onTriggerEnter=function(t){var i=Object.keys(this.entity.sound.slots),e=i.length>0?i[0]:null;e?this.entity.sound&&(1!==this.exitRule&&4!==this.exitRule||this.entity.playedOnce?2!==this.exitRule||this.entity.playedOnce?3!==this.exitRule||this.entity.playedOnce||(this.entity.sound.play(e),this.entity.playedOnce=!0):(this.entity.isSoundPaused?this.entity.sound.resume(e):this.entity.sound.play(e),this.entity.isSoundPaused=!1):(this.entity.sound.play(e),this.entity.isSoundPaused=!1)):console.log("No sound slots found on sound entity.")},CollisionSoundTrigger.prototype.onTriggerLeave=function(t){var i=Object.keys(this.entity.sound.slots),e=i.length>0?i[0]:null;if(e){if(this.entity.sound)switch(this.exitRule){case 1:this.entity.sound.stop(e);break;case 2:this.entity.sound.pause(e),this.entity.isSoundPaused=!0}}else console.log("No sound slots found on sound entity.")};var LoadGlb=pc.createScript("loadGlb");LoadGlb.attributes.add("glbAsset",{type:"asset",assetType:"binary"}),LoadGlb.prototype.initialize=function(){var t=this;utils.loadGlbContainerFromAsset(this.glbAsset,null,this.glbAsset.name,(function(a,e){t.entity.model.asset=e.resource.model,t.entity.animation.assets=e.resource.animations,t.entity.animation.play("WaterSplash.glb 1")}))};var Videotexture=pc.createScript("videotexture");Videotexture.attributes.add("screenMaterial",{type:"asset",assetType:"material",title:"Screen material"}),Videotexture.attributes.add("materials",{type:"asset",assetType:"material",array:!0}),Videotexture.attributes.add("videoAsset",{type:"asset",assetType:"audio"}),Videotexture.prototype.initialize=function(){this.entity.collision.on("triggerenter",this.onTriggerEnter,this),this.playVideo()},Videotexture.prototype.initialize=function(){var e=this.app,t=new pc.Texture(e.graphicsDevice,{format:pc.PIXELFORMAT_R5_G6_B5,autoMipmap:!1});t.minFilter=pc.FILTER_LINEAR,t.magFilter=pc.FILTER_LINEAR,t.addressU=pc.ADDRESS_CLAMP_TO_EDGE,t.addressV=pc.ADDRESS_CLAMP_TO_EDGE;var i=document.createElement("video");i.addEventListener("canplay",(function(e){t.setSource(i)})),i.src=this.videoAsset.getFileUrl(),i.crossOrigin="anonymous",i.loop=!1;var a=i.style;a.width="1px",a.height="1px",a.position="absolute",a.opacity="0",a.zIndex="-1000",a.pointerEvents="none",document.body.appendChild(i);var r=this.screenMaterial.resource;r.emissiveMap=t,r.update(),this.videoTexture=t,this.entity.collision.on("triggerenter",(function(e){i.play()}),this),this.entity.collision.on("triggerleave",(function(e){i.pause()}),this),this.upload=!0},Videotexture.prototype.update=function(e){this.upload=!this.upload,this.upload&&this.videoTexture.upload()};var FirstPersonMovement=pc.createScript("firstPersonMovement");FirstPersonMovement.attributes.add("camera",{type:"entity",description:"Optional, assign a camera entity, otherwise one is created"}),FirstPersonMovement.attributes.add("power",{type:"number",default:2500,description:"Adjusts the speed of player movement"}),FirstPersonMovement.attributes.add("lookSpeed",{type:"number",default:.25,description:"Adjusts the sensitivity of looking"}),FirstPersonMovement.prototype.initialize=function(){this.force=new pc.Vec3,this.eulers=new pc.Vec3;var e=this.app;e.mouse.on("mousemove",this._onMouseMove,this),e.mouse.on("mousedown",(function(){e.mouse.enablePointerLock()}),this),this.entity.collision||console.error("First Person Movement script needs to have a 'collision' component"),this.entity.rigidbody&&this.entity.rigidbody.type===pc.BODYTYPE_DYNAMIC||console.error("First Person Movement script needs to have a DYNAMIC 'rigidbody' component")},FirstPersonMovement.prototype.update=function(e){this.camera||this._createCamera();var t=this.force,s=this.app,o=this.camera.forward,i=this.camera.right,r=0,n=0;(s.keyboard.isPressed(pc.KEY_A)||s.keyboard.isPressed(pc.KEY_Q))&&(r-=i.x,n-=i.z),s.keyboard.isPressed(pc.KEY_D)&&(r+=i.x,n+=i.z),s.keyboard.isPressed(pc.KEY_W)&&(r+=o.x,n+=o.z),s.keyboard.isPressed(pc.KEY_S)&&(r-=o.x,n-=o.z),0===r&&0===n||(t.set(r,0,n).normalize().scale(this.power),this.entity.rigidbody.applyForce(t)),this.camera.setLocalEulerAngles(this.eulers.y,this.eulers.x,0)},FirstPersonMovement.prototype._onMouseMove=function(e){(pc.Mouse.isPointerLocked()||e.buttons[0])&&(this.eulers.x-=this.lookSpeed*e.dx,this.eulers.y-=this.lookSpeed*e.dy)},FirstPersonMovement.prototype._createCamera=function(){this.camera=new pc.Entity,this.camera.setName("First Person Camera"),this.camera.addComponent("camera"),this.entity.addChild(this.camera),this.camera.translateLocal(0,.5,0)};var ScrollingTexture=pc.createScript("scrollingTexture");ScrollingTexture.attributes.add("materialAsset",{type:"asset"}),ScrollingTexture.attributes.add("speed",{type:"vec2"}),ScrollingTexture.tmpVec2=new pc.Vec2,ScrollingTexture.tmpOffset=new pc.Vec2,ScrollingTexture.prototype.initialize=function(){this.materialAsset&&(this.material=this.materialAsset.resource)},ScrollingTexture.prototype.update=function(e){var t=ScrollingTexture.tmpVec2,r=ScrollingTexture.tmpOffset;t.set(this.speed.x,this.speed.y),t.scale(e),r.copy(this.material.diffuseMapOffset),r.add(t),this.material.diffuseMapOffset=r,this.material.normalMapOffset=r,this.material.update()};var FlyCamera=pc.createScript("flyCamera");FlyCamera.attributes.add("speed",{type:"number",default:10}),FlyCamera.attributes.add("fastSpeed",{type:"number",default:20}),FlyCamera.attributes.add("mode",{type:"number",default:0,enum:[{Lock:0},{Drag:1}]}),FlyCamera.prototype.initialize=function(){var t=this.entity.getLocalEulerAngles();this.ex=t.x,this.ey=t.y,this.moved=!1,this.lmbDown=!1,this.lastTouchPosition=new pc.Vec2,this.app.mouse.disableContextMenu(),this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHSTART,this.onTouchStart,this),this.app.touch.on(pc.EVENT_TOUCHEND,this.onTouchEnd,this),this.app.touch.on(pc.EVENT_TOUCHMOVE,this.onTouchMove,this),this.app.touch.on(pc.EVENT_TOUCHCANCEL,this.onTouchCancel,this))},FlyCamera.prototype.update=function(t){this.entity.setLocalEulerAngles(this.ex,this.ey,0);var e=this.app,o=this.speed;e.keyboard.isPressed(pc.KEY_SHIFT)&&(o=this.fastSpeed),e.keyboard.isPressed(pc.KEY_UP)||e.keyboard.isPressed(pc.KEY_W)?this.entity.translateLocal(0,0,-o*t):(e.keyboard.isPressed(pc.KEY_DOWN)||e.keyboard.isPressed(pc.KEY_S))&&this.entity.translateLocal(0,0,o*t),e.keyboard.isPressed(pc.KEY_LEFT)||e.keyboard.isPressed(pc.KEY_A)?this.entity.translateLocal(-o*t,0,0):(e.keyboard.isPressed(pc.KEY_RIGHT)||e.keyboard.isPressed(pc.KEY_D))&&this.entity.translateLocal(o*t,0,0),e.keyboard.isPressed(pc.KEY_V)?(this.app.xr.supported?(console.log("IS Supported"),this.app.xr.isAvailable(pc.XRTYPE_VR)?console.log("IS AVAILABLE"):console.log("IS NOT AVAILABLE")):console.log("IS NOT Supported"),this.app.xr.supported&&this.app.xr.isAvailable(pc.XRTYPE_VR)&&this.entity.camera.startXr(pc.XRTYPE_VR,pc.XRSPACE_LOCALFLOOR,(function(t){t&&console.log("Failed to start session")}))):e.keyboard.isPressed(pc.KEY_B)&&this.app.xr.end()},FlyCamera.prototype.rotateCamera=function(t,e){this.ex-=e/5,this.ex=pc.math.clamp(this.ex,-90,90),this.ey-=t/5},FlyCamera.prototype.onMouseMove=function(t){if(this.mode){if(!this.lmbDown)return}else if(!pc.Mouse.isPointerLocked())return;this.moved?this.rotateCamera(t.dx,t.dy):this.moved=!0},FlyCamera.prototype.onMouseDown=function(t){0===t.button&&(this.lmbDown=!0,this.mode||pc.Mouse.isPointerLocked()||this.app.mouse.enablePointerLock())},FlyCamera.prototype.onMouseUp=function(t){0===t.button&&(this.lmbDown=!1)},FlyCamera.prototype.onTouchStart=function(t){if(1==t.touches.length){this.lmbDown=!0;var e=t.touches[0];this.lastTouchPosition.set(e.x,e.y)}t.event.preventDefault(),this.app.xr.supported?(console.log("IS Supported"),this.app.xr.isAvailable(pc.XRTYPE_VR)?console.log("IS AVAILABLE"):console.log("IS NOT AVAILABLE")):console.log("IS NOT Supported"),this.app.xr.supported&&this.app.xr.isAvailable(pc.XRTYPE_VR)&&this.camera.startXr(pc.XRTYPE_VR,pc.XRSPACE_LOCAL,(function(t){t&&console.log("Failed to start session")}))},FlyCamera.prototype.onTouchEnd=function(t){if(0===t.touches.length)this.lmbDown=!1;else if(1==t.touches.length){var e=t.touches[0];this.lastTouchPosition.set(e.x,e.y)}},FlyCamera.prototype.onTouchMove=function(t){var e=t.touches[0];1==t.touches.length&&this.rotateCamera(e.x-this.lastTouchPosition.x,e.y-this.lastTouchPosition.y,this.touchLookSensitivity),this.lastTouchPosition.set(e.x,e.y)},FlyCamera.prototype.onTouchCancel=function(t){this.lmbDown=!1};function SSAOEffect(e,t){pc.PostEffect.call(this,e),this.ssaoScript=t,this.needsDepthBuffer=!0;var i=[pc.shaderChunks.screenDepthPS,"","varying vec2 vUv0;","","//uniform sampler2D uColorBuffer;","uniform vec4 uResolution;","","uniform float uAspect;","","#define saturate(x) clamp(x,0.0,1.0)","","// Largely based on 'Dominant Light Shadowing'","// 'Lighting Technology of The Last of Us Part II' by Hawar Doghramachi, Naughty Dog, LLC","","const float kSSCTLog2LodRate = 3.0;","","highp float getWFromProjectionMatrix(const mat4 p, const vec3 v) {","    // this essentially returns (p * vec4(v, 1.0)).w, but we make some assumptions","    // this assumes a perspective projection","    return -v.z;","    // this assumes a perspective or ortho projection","    // return p[2][3] * v.z + p[3][3];","}","","highp float getViewSpaceZFromW(const mat4 p, const float w) {","    // this assumes a perspective projection","    return -w;","    // this assumes a perspective or ortho projection","   // return (w - p[3][3]) / p[2][3];","}","","","const float kLog2LodRate = 3.0;","","vec2 sq(const vec2 a) {","    return a * a;","}","","uniform float uInvFarPlane;","","vec2 pack(highp float depth) {","// we need 16-bits of precision","    highp float z = clamp(depth * uInvFarPlane, 0.0, 1.0);","    highp float t = floor(256.0 * z);","    mediump float hi = t * (1.0 / 256.0);   // we only need 8-bits of precision","    mediump float lo = (256.0 * z) - t;     // we only need 8-bits of precision","    return vec2(hi, lo);","}","","// random number between 0 and 1, using interleaved gradient noise","float random(const highp vec2 w) {","    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);","    return fract(m.z * fract(dot(w, m.xy)));","}","","// returns the frag coord in the GL convention with (0, 0) at the bottom-left","highp vec2 getFragCoord() {","    return gl_FragCoord.xy;","}","","highp vec3 computeViewSpacePositionFromDepth(highp vec2 uv, highp float linearDepth) {","    return vec3((0.5 - uv) * vec2(uAspect, 1.0) * linearDepth, linearDepth);","}","","highp vec3 faceNormal(highp vec3 dpdx, highp vec3 dpdy) {","    return normalize(cross(dpdx, dpdy));","}","","// Compute normals using derivatives, which essentially results in half-resolution normals","// this creates arifacts around geometry edges.","// Note: when using the spirv optimizer, this results in much slower execution time because","//       this whole expression is inlined in the AO loop below.","highp vec3 computeViewSpaceNormal(const highp vec3 position) {","    return faceNormal(dFdx(position), dFdy(position));","}","","// Compute normals directly from the depth texture, resulting in full resolution normals","// Note: This is actually as cheap as using derivatives because the texture fetches","//       are essentially equivalent to textureGather (which we don't have on ES3.0),","//       and this is executed just once.","highp vec3 computeViewSpaceNormal(const highp vec3 position, const highp vec2 uv) {","    highp vec2 uvdx = uv + vec2(uResolution.z, 0.0);","    highp vec2 uvdy = uv + vec2(0.0, uResolution.w);","    highp vec3 px = computeViewSpacePositionFromDepth(uvdx, -getLinearScreenDepth(uvdx));","    highp vec3 py = computeViewSpacePositionFromDepth(uvdy, -getLinearScreenDepth(uvdy));","    highp vec3 dpdx = px - position;","    highp vec3 dpdy = py - position;","    return faceNormal(dpdx, dpdy);","}","","// Ambient Occlusion, largely inspired from:","// 'The Alchemy Screen-Space Ambient Obscurance Algorithm' by Morgan McGuire","// 'Scalable Ambient Obscurance' by Morgan McGuire, Michael Mara and David Luebke","","uniform vec2 uSampleCount;","uniform float uSpiralTurns;","","#define PI (3.14159)","","vec3 tapLocation(float i, const float noise) {","    float offset = ((2.0 * PI) * 2.4) * noise;","    float angle = ((i * uSampleCount.y) * uSpiralTurns) * (2.0 * PI) + offset;","    float radius = (i + noise + 0.5) * uSampleCount.y;","    return vec3(cos(angle), sin(angle), radius * radius);","}","","highp vec2 startPosition(const float noise) {","    float angle = ((2.0 * PI) * 2.4) * noise;","    return vec2(cos(angle), sin(angle));","}","","uniform vec2 uAngleIncCosSin;","","highp mat2 tapAngleStep() {","    highp vec2 t = uAngleIncCosSin;","    return mat2(t.x, t.y, -t.y, t.x);","}","","vec3 tapLocationFast(float i, vec2 p, const float noise) {","    float radius = (i + noise + 0.5) * uSampleCount.y;","    return vec3(p, radius * radius);","}","","uniform float uMaxLevel;","uniform float uInvRadiusSquared;","uniform float uMinHorizonAngleSineSquared;","uniform float uBias;","uniform float uPeak2;","","void computeAmbientOcclusionSAO(inout float occlusion, float i, float ssDiskRadius,","        const highp vec2 uv,  const highp vec3 origin, const vec3 normal,","        const vec2 tapPosition, const float noise) {","","    vec3 tap = tapLocationFast(i, tapPosition, noise);","","    float ssRadius = max(1.0, tap.z * ssDiskRadius);","","    vec2 uvSamplePos = uv + vec2(ssRadius * tap.xy) * uResolution.zw;","","    float level = clamp(floor(log2(ssRadius)) - kLog2LodRate, 0.0, float(uMaxLevel));","    highp float occlusionDepth = -getLinearScreenDepth(uvSamplePos);","    highp vec3 p = computeViewSpacePositionFromDepth(uvSamplePos, occlusionDepth);","","    // now we have the sample, compute AO","    vec3 v = p - origin;        // sample vector","    float vv = dot(v, v);       // squared distance","    float vn = dot(v, normal);  // distance * cos(v, normal)","","    // discard samples that are outside of the radius, preventing distant geometry to","    // cast shadows -- there are many functions that work and choosing one is an artistic","    // decision.","    float w = max(0.0, 1.0 - vv * uInvRadiusSquared);","    w = w*w;","","    // discard samples that are too close to the horizon to reduce shadows cast by geometry","    // not sufficiently tessellated. The goal is to discard samples that form an angle 'beta'","    // smaller than 'epsilon' with the horizon. We already have dot(v,n) which is equal to the","    // sin(beta) * |v|. So the test simplifies to vn^2 < vv * sin(epsilon)^2.","    w *= step(vv * uMinHorizonAngleSineSquared, vn * vn);","","    occlusion += w * max(0.0, vn + origin.z * uBias) / (vv + uPeak2);","}","","uniform float uProjectionScaleRadius;","uniform float uIntensity;","","float scalableAmbientObscurance(highp vec2 uv, highp vec3 origin, vec3 normal) {","    float noise = random(getFragCoord());","    highp vec2 tapPosition = startPosition(noise);","    highp mat2 angleStep = tapAngleStep();","","    // Choose the screen-space sample radius","    // proportional to the projected area of the sphere","    float ssDiskRadius = -(uProjectionScaleRadius / origin.z);","","    float occlusion = 0.0;",e.isWebGL2?"    for (float i = 0.0; i < uSampleCount.x; i += 1.0) {":"   const float maxSampleCount = 256.0;   for (float i = 0.0; i < maxSampleCount; i += 1.0) {       if (i >= uSampleCount.x) break;","        computeAmbientOcclusionSAO(occlusion, i, ssDiskRadius, uv, origin, normal, tapPosition, noise);","        tapPosition = angleStep * tapPosition;","    }","    return sqrt(occlusion * uIntensity);","}","","uniform float uPower;","","void main() {","    highp vec2 uv = vUv0; //variable_vertex.xy; // interpolated to pixel center","","    highp float depth = -getLinearScreenDepth(vUv0);","    highp vec3 origin = computeViewSpacePositionFromDepth(uv, depth);","    vec3 normal = computeViewSpaceNormal(origin, uv);","","    float occlusion = 0.0;","","    if (uIntensity > 0.0) {","        occlusion = scalableAmbientObscurance(uv, origin, normal);","    }","","    // occlusion to visibility","    float aoVisibility = pow(saturate(1.0 - occlusion), uPower);","","    vec4 inCol = vec4(1.0, 1.0, 1.0, 1.0); //texture2D( uColorBuffer,  uv );","","    gl_FragColor.r = aoVisibility; //postProcess.color.rgb = vec3(aoVisibility, pack(origin.z));","}","","void main_old()","{","    vec2 aspectCorrect = vec2( 1.0, uAspect );","","    float depth = getLinearScreenDepth(vUv0);","    gl_FragColor.r = fract(floor(depth*256.0*256.0)),fract(floor(depth*256.0)),fract(depth);","}"].join("\n"),o=[pc.shaderChunks.screenDepthPS,"","varying vec2 vUv0;","","uniform sampler2D uSSAOBuffer;","uniform vec4 uResolution;","","uniform float uAspect;","","uniform int uBilatSampleCount;","uniform float uFarPlaneOverEdgeDistance;","uniform float uBrightness;","","float random(const highp vec2 w) {","    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);","    return fract(m.z * fract(dot(w, m.xy)));","}","","float bilateralWeight(in float depth, in float sampleDepth) {","    float diff = (sampleDepth - depth) * uFarPlaneOverEdgeDistance;","    return max(0.0, 1.0 - diff * diff);","}","","void tap(inout float sum, inout float totalWeight, float weight, float depth, vec2 position) {","    // ambient occlusion sample","    float ssao = texture2D( uSSAOBuffer, position ).r;","    float tdepth = -getLinearScreenDepth( position );","","    // bilateral sample","    float bilateral = bilateralWeight(depth, tdepth);","    bilateral *= weight;","    sum += ssao * bilateral;","    totalWeight += bilateral;","}","","void main() {","    highp vec2 uv = vUv0; // variable_vertex.xy; // interpolated at pixel's center","","    // we handle the center pixel separately because it doesn't participate in bilateral filtering","    float depth = -getLinearScreenDepth(vUv0); // unpack(data.gb);","    float totalWeight = 0.0; // float(uBilatSampleCount*2+1)*float(uBilatSampleCount*2+1);","    float ssao = texture2D( uSSAOBuffer, vUv0 ).r;","    float sum = ssao * totalWeight;","",e.isWebGL2?"    for (int x = -uBilatSampleCount; x <= uBilatSampleCount; x++) {       for (int y = -uBilatSampleCount; y < uBilatSampleCount; y++) {":"    for (int x = -4; x <= 4; x++) {       for (int y = -4; y < 4; y++) {","           float weight = 1.0;","           vec2 offset = vec2(x,y)*uResolution.zw;","           tap(sum, totalWeight, weight, depth, uv + offset);","       }","    }","","    float ao = sum / totalWeight;","","    // simple dithering helps a lot (assumes 8 bits target)","    // this is most useful with high quality/large blurs","    // ao += ((random(gl_FragCoord.xy) - 0.5) / 255.0);","","    ao = mix(ao, 1.0, uBrightness);","    gl_FragColor.a = ao;","}"].join("\n"),a=["varying vec2 vUv0;","uniform sampler2D uColorBuffer;","uniform sampler2D uSSAOBuffer;","","void main(void)","{","    vec4 inCol = texture2D( uColorBuffer, vUv0 );","    float ssao = texture2D( uSSAOBuffer, vUv0 ).a;","    gl_FragColor.rgb = inCol.rgb * ssao;","    gl_FragColor.a = inCol.a;","}"].join("\n"),s={aPosition:pc.SEMANTIC_POSITION};this.ssaoShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,i,"SsaoShader",s),this.blurShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,o,"SsaoBlurShader",s),this.outputShader=pc.createShaderFromCode(e,pc.PostEffect.quadVertexShader,a,"SsaoOutputShader",s),this.radius=4,this.brightness=0,this.samples=20,this.downscale=1}SSAOEffect.prototype=Object.create(pc.PostEffect.prototype),SSAOEffect.prototype.constructor=SSAOEffect,SSAOEffect.prototype._destroy=function(){this.target&&(this.target.destroyTextureBuffers(),this.target.destroy(),this.target=null),this.blurTarget&&(this.blurTarget.destroyTextureBuffers(),this.blurTarget.destroy(),this.blurTarget=null)},SSAOEffect.prototype._resize=function(e){var t=Math.ceil(e.colorBuffer.width/this.downscale),i=Math.ceil(e.colorBuffer.height/this.downscale);if(t!==this.width||i!==this.height){this.width=t,this.height=i,this._destroy();var o=new pc.Texture(this.device,{format:pc.PIXELFORMAT_RGBA8,minFilter:pc.FILTER_LINEAR,magFilter:pc.FILTER_LINEAR,addressU:pc.ADDRESS_CLAMP_TO_EDGE,addressV:pc.ADDRESS_CLAMP_TO_EDGE,width:this.width,height:this.height,mipmaps:!1});o.name="SSAO Result",this.target=new pc.RenderTarget({name:"SSAO Result Render Target",colorBuffer:o,depth:!1});var a=new pc.Texture(this.device,{format:pc.PIXELFORMAT_RGBA8,minFilter:pc.FILTER_LINEAR,magFilter:pc.FILTER_LINEAR,addressU:pc.ADDRESS_CLAMP_TO_EDGE,addressV:pc.ADDRESS_CLAMP_TO_EDGE,width:this.width,height:this.height,mipmaps:!1});a.name="SSAO Blur",this.blurTarget=new pc.RenderTarget({name:"SSAO Blur Render Target",colorBuffer:a,depth:!1})}},Object.assign(SSAOEffect.prototype,{render:function(e,t,i){this._resize(e);var o=this.device,a=o.scope,s=this.samples,r=1/(s-.5)*10*2*3.141,n=this.radius,l=.1*n,u=2*l*3.141*.125,c=.5*o.height,h=this.ssaoScript.entity.camera.farClip;a.resolve("uAspect").setValue(this.width/this.height),a.resolve("uResolution").setValue([this.width,this.height,1/this.width,1/this.height]),a.resolve("uBrightness").setValue(this.brightness),a.resolve("uInvFarPlane").setValue(1/h),a.resolve("uSampleCount").setValue([s,1/s]),a.resolve("uSpiralTurns").setValue(10),a.resolve("uAngleIncCosSin").setValue([Math.cos(r),Math.sin(r)]),a.resolve("uMaxLevel").setValue(0),a.resolve("uInvRadiusSquared").setValue(1/(n*n)),a.resolve("uMinHorizonAngleSineSquared").setValue(0),a.resolve("uBias").setValue(.001),a.resolve("uPeak2").setValue(l*l),a.resolve("uIntensity").setValue(u),a.resolve("uPower").setValue(1),a.resolve("uProjectionScaleRadius").setValue(c*n),this.drawQuad(this.target,this.ssaoShader,i),a.resolve("uSSAOBuffer").setValue(this.target.colorBuffer),a.resolve("uFarPlaneOverEdgeDistance").setValue(1),a.resolve("uBilatSampleCount").setValue(4),this.drawQuad(this.blurTarget,this.blurShader,i),a.resolve("uSSAOBuffer").setValue(this.blurTarget.colorBuffer),a.resolve("uColorBuffer").setValue(e.colorBuffer),this.drawQuad(t,this.outputShader,i)}});var SSAO=pc.createScript("ssao");SSAO.attributes.add("radius",{type:"number",default:4,min:0,max:20,title:"Radius"}),SSAO.attributes.add("brightness",{type:"number",default:0,min:0,max:1,title:"Brightness"}),SSAO.attributes.add("samples",{type:"number",default:16,min:1,max:256,title:"Samples"}),SSAO.attributes.add("downscale",{type:"number",default:1,min:1,max:4,title:"Downscale"}),SSAO.prototype.initialize=function(){this.effect=new SSAOEffect(this.app.graphicsDevice,this),this.effect.radius=this.radius,this.effect.brightness=this.brightness,this.effect.samples=this.samples,this.effect.downscale=this.downscale,this.on("attr",(function(e,t){this.effect[e]=t}),this);var e=this.entity.camera.postEffects;e.addEffect(this.effect),this.on("state",(function(t){t?e.addEffect(this.effect):e.removeEffect(this.effect)})),this.on("destroy",(function(){e.removeEffect(this.effect),this.effect._destroy()}))};var FloatingObject=pc.createScript("floatingObject");FloatingObject.attributes.add("amplitude",{type:"number",default:.5,title:"Amplitude"}),FloatingObject.attributes.add("frequency",{type:"number",default:1,title:"Frequency"}),FloatingObject.attributes.add("offset",{type:"number",default:.5,title:"Offset"}),FloatingObject.prototype.initialize=function(){this.initialPosition=this.entity.getLocalPosition().clone(),this.time=0},FloatingObject.prototype.update=function(t){this.time+=t;var i=this.initialPosition.y+Math.sin(this.time*this.frequency+this.offset)*this.amplitude;this.entity.setLocalPosition(this.initialPosition.x,i,this.initialPosition.z)};var FloatingObjectX=pc.createScript("floatingObjectX");FloatingObjectX.attributes.add("amplitude",{type:"number",default:.5,title:"Amplitude"}),FloatingObjectX.attributes.add("frequency",{type:"number",default:1,title:"Frequency"}),FloatingObjectX.attributes.add("offset",{type:"number",default:.5,title:"Offset"}),FloatingObjectX.prototype.initialize=function(){this.initialPosition=this.entity.getLocalPosition().clone(),this.time=0},FloatingObjectX.prototype.update=function(t){this.time+=t;var i=this.initialPosition.x+Math.sin(this.time*this.frequency+this.offset)*this.amplitude;this.entity.setLocalPosition(this.initialPosition.y,i,this.initialPosition.z)};